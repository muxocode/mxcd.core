<?xml version="1.0"?>
<doc>
    <assembly>
        <name>mxcd.core</name>
    </assembly>
    <members>
        <member name="T:mxcd.core.actions.ActionTime">
            <summary>
            Moment of the action
            </summary>
        </member>
        <member name="F:mxcd.core.actions.ActionTime.before">
            <summary>
            Before action
            </summary>
        </member>
        <member name="F:mxcd.core.actions.ActionTime.after">
            <summary>
            After action
            </summary>
        </member>
        <member name="T:mxcd.core.actions.IAction`1">
            <summary>
            Action interface
            </summary>
            <typeparam name="T">Type</typeparam>
        </member>
        <member name="M:mxcd.core.actions.IAction`1.Do(`0,mxcd.core.actions.ActionTime)">
            <summary>
            Run operation
            </summary>
            <param name="obj">entity</param>
            <param name="actionTime">Action moment</param>
            <returns></returns>
        </member>
        <member name="T:mxcd.core.actions.IDeleteAction`1">
            <summary>
            Action to execute before delete an entity
            </summary>
            <typeparam name="T">Type</typeparam>
        </member>
        <member name="T:mxcd.core.actions.IGetAction`1">
            <summary>
            Action to execute after get an entity
            </summary>
            <typeparam name="T">Type</typeparam>
        </member>
        <member name="T:mxcd.core.actions.IInsertAction`1">
            <summary>
            Action to execute after insert an entity
            </summary>
            <typeparam name="T">Type</typeparam>
        </member>
        <member name="T:mxcd.core.actions.IUpdateAction`1">
            <summary>
            Action to execute before update an entity
            </summary>
            <typeparam name="T">Type</typeparam>
        </member>
        <member name="T:mxcd.core.cqrs.ICommander`1">
            <summary>
            Commands for entity
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:mxcd.core.cqrs.ICommander`1.Add(`0)">
            <summary>
            Add an item
            </summary>
            <param name="item">item to add</param>
        </member>
        <member name="M:mxcd.core.cqrs.ICommander`1.Update(`0)">
            <summary>
            Update an entity
            </summary>
            <returns></returns>
        </member>
        <member name="M:mxcd.core.cqrs.ICommander`1.Update``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},``0)">
            <summary>
            Update by expression
            </summary>
            <typeparam name="TUpdate">Object type</typeparam>
            <param name="expression">expression</param>
            <param name="objToUpdate">data to update</param>
            <returns></returns>
        </member>
        <member name="M:mxcd.core.cqrs.ICommander`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Remove entities
            </summary>
            <param name="expression">Expresion</param>
            <returns></returns>
        </member>
        <member name="M:mxcd.core.cqrs.ICommander`1.Delete``1(``0)">
            <summary>
            Remove an entity
            </summary>
            <param name="key">Unique key</param>
            <returns></returns>
        </member>
        <member name="T:mxcd.core.cqrs.IQuerier`1">
            <summary>
            Querirer
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:mxcd.core.cqrs.IQuerier`1.Get(System.Linq.Expressions.Expression{System.Func{`0}})">
            <summary>
            Gets a collection of T
            </summary>
            <param name="expression">filter</param>
            <returns></returns>
        </member>
        <member name="M:mxcd.core.cqrs.IQuerier`1.Get``1(``0)">
            <summary>
            Gets a entity
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <param name="key">Unique key</param>
            <returns></returns>
        </member>
        <member name="T:mxcd.core.entities.IEntity">
            <summary>
            Entity
            </summary>
        </member>
        <member name="P:mxcd.core.entities.IEntity.Id">
            <summary>
            Unique field of entity
            </summary>
        </member>
        <member name="T:mxcd.core.factory.IFactory`2">
            <summary>
            Factory pattern
            </summary>
        </member>
        <member name="M:mxcd.core.factory.IFactory`2.Create(`0)">
            <summary>
            Creates an entity of <typeparamref name="TOut"/>
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:mxcd.core.rules.implementations.RuleProcessor`1">
            <summary>
            Rule processor
            </summary>
            <typeparam name="T">Type</typeparam>
        </member>
        <member name="P:mxcd.core.rules.implementations.RuleProcessor`1.Rules">
            <summary>
            Object that checks the rules of T entity
            </summary>
        </member>
        <member name="M:mxcd.core.rules.implementations.RuleProcessor`1.#ctor(System.Collections.Generic.IEnumerable{mxcd.core.rules.IRule{`0}})">
            <summary>
            Create a RuleProcessor
            </summary>
            <param name="rules">Rules to check</param>
        </member>
        <member name="M:mxcd.core.rules.implementations.RuleProcessor`1.CheckRules(`0)">
            <summary>
            Check rules
            </summary>
            <param name="entity">entity</param>
            <returns></returns>
        </member>
        <member name="T:mxcd.core.rules.IRule`1">
            <summary>
            Rule
            </summary>
            <typeparam name="T">Type</typeparam>
        </member>
        <member name="M:mxcd.core.rules.IRule`1.Check(`0)">
            <summary>
            Check the rule
            </summary>
            <param name="obj">entity</param>
            <returns></returns>
        </member>
        <member name="T:mxcd.core.rules.IRuleProcessor`1">
            <summary>
            Rule processor
            </summary>
            <typeparam name="T">Type</typeparam>
        </member>
        <member name="P:mxcd.core.rules.IRuleProcessor`1.Rules">
            <summary>
            Rules to check
            </summary>
        </member>
        <member name="M:mxcd.core.rules.IRuleProcessor`1.CheckRules(`0)">
            <summary>
            Check rules
            </summary>
            <param name="entity">entity</param>
            <returns></returns>
        </member>
        <member name="T:mxcd.core.repository.IEntityRepository`1">
            <summary>
            Repository pattern for entities
            </summary>
        </member>
        <member name="M:mxcd.core.repository.IEntityRepository`1.Get``1(``0)">
            <summary>
            Get a specific entity
            </summary>
            <param name="key">Unique key</param>
            <returns></returns>
        </member>
        <member name="M:mxcd.core.repository.IEntityRepository`1.Update(`0)">
            <summary>
            Update an entity
            </summary>
            <returns></returns>
        </member>
        <member name="M:mxcd.core.repository.IEntityRepository`1.Update``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},``0)">
            <summary>
            Update by expression
            </summary>
            <typeparam name="TUpdate">Object type</typeparam>
            <param name="expression">expression</param>
            <param name="objToUpdate">data to update</param>
            <returns></returns>
        </member>
        <member name="M:mxcd.core.repository.IEntityRepository`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Remove entities
            </summary>
            <param name="expression">Expresion</param>
            <returns></returns>
        </member>
        <member name="M:mxcd.core.repository.IEntityRepository`1.Delete``1(``0)">
            <summary>
            Remove an entity
            </summary>
            <param name="key">Unique key</param>
            <returns></returns>
        </member>
        <member name="T:mxcd.core.repository.IRepository`1">
            <summary>
            Repository pattern
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:mxcd.core.repository.IRepository`1.Add(`0)">
            <summary>
            Add an item
            </summary>
            <param name="item">item to add</param>
        </member>
        <member name="M:mxcd.core.repository.IRepository`1.Get(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets elements from repository
            </summary>
            <param name="expression">Filter</param>
        </member>
        <member name="M:mxcd.core.repository.IRepository`1.Remove(`0[])">
            <summary>
            Removes items from repository
            </summary>
        </member>
        <member name="T:mxcd.core.services.ICreator`2">
            <summary>
            Creates an entity of <typeparamref name="TOut"/> from <typeparamref name="TIn"/> value
            </summary>
            <typeparam name="TOut">out entity</typeparam>
            <typeparam name="TIn">input entity</typeparam>
        </member>
        <member name="M:mxcd.core.services.ICreator`2.Create(`1)">
            <summary>
            Create an <typeparamref name="TOut"/> entity
            </summary>
            <param name="data"><typeparamref name="TIn"/> value</param>
            <returns></returns>
        </member>
        <member name="T:mxcd.core.services.ICreator`1">
            <summary>
            Creates a <typeparamref name="TOut"/> entity
            </summary>
            <typeparam name="TOut"></typeparam>
        </member>
        <member name="M:mxcd.core.services.ICreator`1.Create">
            <summary>
            Creates a <typeparamref name="TOut"/> entity
            </summary>
            <returns></returns>
        </member>
        <member name="T:mxcd.core.services.IService`1">
            <summary>
            Repository with actions asociated
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:mxcd.core.services.IService`1.GetActions">
            <summary>
            Get actions
            </summary>
        </member>
        <member name="P:mxcd.core.services.IService`1.DeleteActions">
            <summary>
            Delete actions
            </summary>
        </member>
        <member name="P:mxcd.core.services.IService`1.UpdateActions">
            <summary>
            Update actions
            </summary>
        </member>
        <member name="P:mxcd.core.services.IService`1.InsertActions">
            <summary>
            Inser actions
            </summary>
        </member>
        <member name="T:mxcd.core.unitOfWork.IPending">
            <summary>
            Pending entities
            </summary>
        </member>
        <member name="M:mxcd.core.unitOfWork.IPending.Add``1(``0)">
            <summary>
            Add a new entity
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="obj">Entity</param>
        </member>
        <member name="M:mxcd.core.unitOfWork.IPending.Update``1(``0)">
            <summary>
            Updates an entiry
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="obj">Entity</param>
            <returns></returns>
        </member>
        <member name="M:mxcd.core.unitOfWork.IPending.Remove``1(``0)">
            <summary>
            Removes an object
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="obj">Entity</param>
            <returns></returns>
        </member>
        <member name="M:mxcd.core.unitOfWork.IPending.Add(System.Action)">
            <summary>
            Add a new action
            </summary>
        </member>
        <member name="M:mxcd.core.unitOfWork.IPending.DiscardActions">
            <summary>
            Discard an action
            </summary>
            <returns></returns>
        </member>
        <member name="M:mxcd.core.unitOfWork.IPending.Discard">
            <summary>
            Clears the colection
            </summary>
        </member>
        <member name="M:mxcd.core.unitOfWork.IPending.Discard``1(``0[])">
            <summary>
            Discard an object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:mxcd.core.unitOfWork.IPending.GetEntities``1(mxcd.core.unitOfWork.enums.TypePending[])">
            <summary>
            Get pending objects
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="types">Types to filter</param>
            <returns></returns>
        </member>
        <member name="M:mxcd.core.unitOfWork.IPending.GetEntities(mxcd.core.unitOfWork.enums.TypePending[])">
            <summary>
            Get pending objects
            </summary>
            <param name="types">Types to filter</param>
            <returns></returns>
        </member>
        <member name="M:mxcd.core.unitOfWork.IPending.GetActions">
            <summary>
            Get pending actions
            </summary>
            <returns></returns>
        </member>
        <member name="T:mxcd.core.unitOfWork.IUnitOfWork">
            <summary>
            Unit of work
            </summary>
        </member>
        <member name="M:mxcd.core.unitOfWork.IUnitOfWork.SaveChanges">
            <summary>
            Save pending changes
            </summary>
        </member>
        <member name="M:mxcd.core.unitOfWork.IUnitOfWork.DiscardChanges">
            <summary>
            Discard pending changes
            </summary>
        </member>
        <member name="T:mxcd.core.unitOfWork.enums.TypePending">
            <summary>
            Action types, that will execute in order
            </summary>
        </member>
        <member name="F:mxcd.core.unitOfWork.enums.TypePending.update">
            <summary>
            Update an item
            </summary>
        </member>
        <member name="F:mxcd.core.unitOfWork.enums.TypePending.remove">
            <summary>
            Removes an item
            </summary>
        </member>
        <member name="F:mxcd.core.unitOfWork.enums.TypePending.add">
            <summary>
            Add new item
            </summary>
        </member>
    </members>
</doc>
